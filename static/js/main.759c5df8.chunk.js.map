{"version":3,"sources":["TextBox/Form.js","TextBox/Header.js","TextBox/TextDisplay.js","TextBox/TextBox.js","AuthUsingArrays/Form.js","AuthUsingArrays/Header.js","AuthUsingArrays/ArrayAuth.js","DynamicSearchBar/DynamicSearchBar.js","Navbar.js","Home.js","App.js","serviceWorker.js","index.js"],"names":["Form","state","className","onChange","this","props","handleChange","id","autoFocus","htmlFor","type","Component","Header","TextDisplay","text","TextBox","spongify","split","map","letter","Math","random","toUpperCase","toLowerCase","join","event","button","document","getElementById","searchBar","checked","setState","value","first_name","last_name","age","email","password","confirm_password","checkPassword","preventDefault","alert","array","console","log","target","onSubmit","onClick","ArrayAuth","Results","rows","locations","location","DynamicSearchBar","autocomplete","e","regex","RegExp","newArray","filter","match","Navbar","to","Home","App","basename","exact","path","component","Boolean","window","hostname","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.759c5df8.chunk.js","sourcesContent":["import React,{Component} from 'react' ; \r\n\r\nclass Form extends Component{\r\n\r\n    state = {\r\n            \r\n    }\r\n    render(){\r\n\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <form className=\"col s12\" onChange={this.props.handleChange}>\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field col s6\">\r\n                            <i className=\"material-icons prefix\">mode_edit</i>\r\n                            <textarea id=\"icon_prefix2\" className=\"materialize-textarea\" autoFocus></textarea>\r\n                            <label className=\"cyan-text text-darken-4\" htmlFor=\"icon_prefix2\">Random Text</label>\r\n                            </div>\r\n                        </div>\r\n                            <label>\r\n                                <input id=\"spongify\" type=\"checkbox\" />\r\n                                <span className=\"cyan-text text-darken-4\">Spongify</span>\r\n                            </label>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Form","import React,{Component} from \"react\";\r\n\r\nclass Header extends Component{\r\n    render(){\r\n        return(\r\n                  <div className=\"container\">\r\n                    <div className=\"divider\"></div>\r\n                        <div className=\"section\">\r\n                            <h3>Real time text display</h3>\r\n                            <p>The text you enter will be displayed in the area below it. If you tick the spongify checkbox, each letter of your text will be capitalised at random.</p>\r\n                        </div>         \r\n                    </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header","import React,{Component} from 'react';\r\n\r\nclass TextDisplay extends Component{\r\n\r\n\r\n    render(){\r\n        const {text} = this.props\r\n        return(\r\n            <div className=\"container\">\r\n              <div className=\"card cyan lighten-4\">\r\n                  <div className=\"card-content\">\r\n                  <h4 className=\"cyan-text text-darken-4\">Your text is:</h4>\r\n                  <p className=\"cyan-text text-darken-4\">{text}</p>\r\n                  </div>\r\n            </div>\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default TextDisplay","import React,{Component} from 'react';\nimport Form from \"./Form\"\nimport Header from \"./Header\"\nimport TextDisplay from \"./TextDisplay\"\n\n\n\nclass TextBox extends Component{\n  \n  state={\n    text: \"\"\n  }\n\n  spongify = (text)=>{\n    let array = text.split('');\n\n    let newArray = array.map((letter)=>{\n      if(Math.random()>0.5){\n        return letter.toUpperCase();\n      }else{\n        return letter.toLowerCase();\n      }\n    });\n\n    return newArray.join(\"\");\n  }\n  \n  handleChange = (event)=>{\n    let button = document.getElementById(\"spongify\");\n    let searchBar = document.getElementById(\"icon_prefix2\")\n    if(button.checked){\n      this.setState({\n        text : this.spongify(searchBar.value) //the way object[key] would refer to object.key, having something in [eg] within set state is just us saying state.eg\n    })\n    }else{\n\n    this.setState({\n        text : searchBar.value //the way object[key] would refer to object.key, having something in [eg] within set state is just us saying state.eg\n    })}\n}\n\n  render(){\n    return (\n      <div className=\"TextBox container\">\n        <Header/>\n        <Form handleChange = {this.handleChange}/>\n        <TextDisplay text = {this.state.text}/>\n      </div>\n    );\n  }\n}\n\nexport default TextBox;\n","import React,{Component} from 'react';\r\n\r\nclass Form extends Component{\r\n    state = {first_name:null,\r\n            last_name: null,\r\n            age:null,\r\n            email:null,\r\n            password:null,\r\n            confirm_password:null\r\n        }\r\n\r\n    checkPassword = (event)=>{\r\n        event.preventDefault();\r\n        if(this.state.password === this.state.confirm_password && this.state.password!==null){\r\n            alert(\"Success\");\r\n            let array = [this.state.first_name,this.state.last_name,this.state.age,this.state.email,this.state.password,this.state.confirm_password];\r\n            console.log(array);\r\n        }else{\r\n            alert(\"Passwords do not match\")\r\n        }\r\n\r\n    }\r\n\r\n    handleChange = (event)=>{\r\n        this.setState({\r\n            [event.target.id] : event.target.value \r\n        })\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"container\">\r\n                <div className=\"row\">\r\n                    <form className=\"col s12\"  onSubmit={this.checkPassword}>\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field col s4\">\r\n                                <input id=\"first_name\" type=\"text\" className=\"validate\"  onChange={this.handleChange} />\r\n                                <label htmlFor=\"first_name\" className=\"active\">First Name</label>\r\n                            </div>\r\n                            <div className=\"input-field col s4\">\r\n                                <input id=\"last_name\" type=\"text\" className=\"validate\" onChange={this.handleChange}/>\r\n                                <label htmlFor=\"last_name\" className=\"active\">Last Name</label>\r\n                            </div>\r\n                            <div className=\"input-field col s4\">\r\n                                <input id=\"age\" type=\"number\" className=\"validate\" onChange={this.handleChange}/>\r\n                                <label htmlFor=\"age\" className=\"active\">Age</label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field col s12\">\r\n                            <input id=\"email\" type=\"email\" className=\"validate\" onChange={this.handleChange}/>\r\n                            <label htmlFor=\"email\" className=\"active\">Email</label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field col s12\">\r\n                                <input id=\"password\" type=\"password\" className=\"validate\" onChange={this.handleChange}/>\r\n                                <label htmlFor=\"password\" className=\"active\">Password</label>\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"row\">\r\n                            <div className=\"input-field col s12\">\r\n                                <input id=\"confirm_password\" type=\"password\" className=\"validate\" onChange={this.handleChange}/>\r\n                                <label htmlFor=\"confirm_password\" className=\"active\">Confirm Password</label>\r\n                            </div>\r\n                        </div>\r\n                        <button className=\"btn waves-effect waves-light\" onClick={this.checkPassword}>Submit</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        \r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Form","import React,{Component} from \"react\";\r\n\r\nclass Header extends Component{\r\n    render(){\r\n        return(\r\n                  <div className=\"container\">\r\n                    <div className=\"divider\"></div>\r\n                        <div className=\"section\">\r\n                            <h3>Auth using Arrays</h3>\r\n                            <p>Please enter your details below. Hitting submit gives you the array containing your details will be displayed in the console (provided the passwords match ofcourse).  </p>\r\n                        </div>         \r\n                    </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header","import React from 'react';\nimport Form from \"./Form\"\nimport Header from './Header';\n\nfunction ArrayAuth() {\n  return (\n    <div className=\"ArrayAuth\">\n      <Header/>\n        <Form/>\n        <div className=\"divider\"></div>\n    </div>\n  );\n}\n\nexport default ArrayAuth;\n","import React,{Component} from \"react\";\r\n\r\n\r\n\r\n\r\n\r\nconst Results = (props)=>{\r\n    const rows = props.locations.map(location=>{\r\n        return(\r\n            <li className=\"collection-item\">{location}</li>\r\n        )\r\n            \r\n    })\r\n    return(\r\n        <ul className=\"collection\">{rows}</ul>\r\n    )\r\n}\r\n\r\nclass DynamicSearchBar extends Component{\r\n\r\n    state = {\r\n        locations: []\r\n    }\r\n\r\n\r\n    autocomplete = (e)=>{\r\n        let array = [ \"Durban,SA\" , \"Cape Town,SA\" ,\"PE,SA\" , \"Johannesburg,SA\", \"Pretoria,SA\", \"Delhi,India\", \"Gujarat,India\", \"Big Ben,UK\" , \"California,USA\" , \"London,UK\" ]\r\n        const regex = new RegExp(`^${e.target.value}`,\"gi\");\r\n        let newArray = array.filter(location=>{\r\n            return location.match(regex);\r\n        });\r\n        console.log(newArray);\r\n        if(e.target.value ===\" \"||e.target.value === \"\"){\r\n            this.setState({locations: []});\r\n        }else{\r\n            this.setState({locations : newArray});\r\n        }\r\n        console.log(this.state)\r\n\r\n    }\r\n\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"container\">\r\n            <div className=\"section\">\r\n                <h5>Dynamic Search Bar</h5>\r\n                <p>Our company has a few branches and the autocomplete shows them as you carry on typing</p>\r\n            </div>\r\n              <div className=\"row\">\r\n                    <div className=\"col s12\">\r\n                    <div className=\"row\">\r\n                        <div className=\"input-field col s12\">\r\n                            <i className=\"material-icons prefix\">textsms</i>\r\n                            <input type=\"text\" id=\"autocomplete-input\" className=\"autocomplete\" onChange={this.autocomplete}/>\r\n                            <label htmlFor=\"autocomplete-input\" className=\"trigger-enter-active\">Autocomplete</label>\r\n                        </div>\r\n                        <Results locations = {this.state.locations}/>\r\n                        \r\n                    </div>\r\n                    </div>\r\n                </div>\r\n\r\n                </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DynamicSearchBar","\r\nimport React from 'react';\r\nimport {HashRouter, Route,Link} from \"react-router-dom\"\r\n\r\nconst Navbar = () => {\r\n  return (\r\n    <nav className=\"nav-wrapper blue accent-3\">\r\n      <div className=\"container\">\r\n        <a className=\"brand-logo\">Zaio Challenges</a>\r\n        <ul className=\"right\">\r\n          <li><Link to=\"/ReactIsFun\">React is fun</Link></li>\r\n          <li><Link to='/AuthenticationUsingArrays'>Authentication using Arrays</Link></li>\r\n          <li><Link to='/DynamicSearchBar'>Dynamic search bar</Link></li>\r\n        </ul>\r\n      </div>\r\n    </nav> \r\n  )\r\n}\r\nexport default Navbar","import React,{Component} from \"react\";\r\n\r\nclass Home extends Component{\r\n    render(){\r\n        return(\r\n                  <div className=\"container\">\r\n                    <div className=\"divider\"></div>\r\n                        <div className=\"section\">\r\n                            <h3>Tasks I did done</h3>\r\n                            <p>The Navbar will redirect you to a few of the simple challenges I completed on the Zaio platform  </p>\r\n                        </div>         \r\n                    </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home","import React from 'react';\nimport TextBox from './TextBox/TextBox'\nimport ArrayAuth from \"./AuthUsingArrays/ArrayAuth\"\nimport DynamicSearchBar from \"./DynamicSearchBar/DynamicSearchBar\"\nimport Navbar from \"./Navbar\"\nimport {HashRouter, Route} from \"react-router-dom\"\nimport Home from './Home'\n\nfunction App() {\n  return (\n    <HashRouter basename =\"/zaiostuff\">\n      <div className=\"App\">\n        <Navbar/>\n        <Route exact path = \"/\" component = {Home} />\n        <Route path =\"/ReactIsFun\" component={TextBox}/>\n        <Route path ='/AuthenticationUsingArrays' component={ArrayAuth}/>\n        <Route path ='/DynamicSearchBar' component={DynamicSearchBar}/>\n      </div>    \n      </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}